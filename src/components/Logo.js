import React from 'react';

//import { storeApp, logoAnimationStep } from "../reducers";

// import { combineReducers } from 'redux'
import { createStore } from 'redux';

var createReactClass = require('create-react-class');

const BACKGROUND_POS_START = 800;
const DURATION = 2000; //in ms
const FPS = 30; //frames per second
const SCROLLSTEP = 1 / (DURATION / 1000 * FPS);

// these will be used as styles in our React component later
const defaultLogoState = {
  animationProgress: 0,
  backgroundPos: BACKGROUND_POS_START
};

// Redux reducer
const logoReducer = function(state = defaultLogoState, action) {
  switch (action.type) {
    case 'LOGO.SET_NEXT_ANIMATION_STEP':
      let progress = action.progress;

      // calculate the background position from
      // progress and BACKGROUND_POS_START
      return Object.assign({}, state, {
        animationProgress: progress,
        backgroundPos: Math.floor(
          BACKGROUND_POS_START - progress * BACKGROUND_POS_START
        )
      });
    default:
      return state;
  }
};

// Redux action
// We'll dispatch this on every frame to animate the element
const logoAnimationStep = function(progress) {
  return {
    type: 'LOGO.SET_NEXT_ANIMATION_STEP',
    progress: progress
  };
};

// Redux store
const storeApp = createStore(logoReducer, defaultLogoState);

const Logo = createReactClass({
  render: function() {
    // this is where we use the state/props generated by the Redux
    // store to style our element
    let wrapperStyles = {
      transform: `translateY(${this.props.backgroundPos}px)`
    };

    return (
      <div className="logo-wrapper absolute-center" style={wrapperStyles}>
        <a className="logo absolute-center" target={'_blank'}>
          {' '}
        </a>
      </div>
    );
  }
});

// Main container component
const Container = createReactClass({
  getInitialState: function() {
    // set the intial state of your container component
    // to the state of the Redux store
    return storeApp.getState();
  },

  componentDidMount: function() {
    // subscribe to the Redux store's state changes
    this.unSubscribeStore = storeApp.subscribe(this.onChange);

    // start animation
    this.animateLogo();
  },

  componentWillUnmount: function() {
    this.unSubscribeStore();
  },

  onChange: function() {
    // set the state for container component every time
    // the Redux store's state changes
    this.setState(storeApp.getState());
  },

  animateLogo: function() {
    // here we call animationStep on every frame using requestAnimationFrame
    // it dispatches the logoAnimationStep action on the store
    // with an increasing value, that should end at 0
    let takeStep = SCROLLSTEP;
    let idx = 1;

    let animationStep = function() {
      setTimeout(() => {
        if (this.state.animationProgress < 1) {
          storeApp.dispatch(logoAnimationStep(takeStep));
          idx += 1;
          takeStep = SCROLLSTEP * idx;
          window.requestAnimationFrame(animationStep.bind(this));
        }
      }, 1000 / FPS);
    };

    // kick off animation
    window.requestAnimationFrame(animationStep.bind(this));
  },

  render: function() {
    return (
      <div className="container-inner">
        <div className="main-content">
          <Logo {...this.state} />
        </div>
      </div>
    );
  }
});

export default Container;
